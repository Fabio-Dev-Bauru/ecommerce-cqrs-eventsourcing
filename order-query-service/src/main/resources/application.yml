spring:
  application:
    name: order-query-service
  
  profiles:
    active: ${SPRING_PROFILE:dev}

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/order_query_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 60000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}
    consumer:
      group-id: order-query-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    listener:
      ack-mode: manual

  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false

server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /

logging:
  level:
    root: INFO
    com.ecommerce: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.redis: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}

jwt:
  secret: ${JWT_SECRET:ecommerce-cqrs-eventsourcing-super-secret-key-change-in-production-minimum-256-bits}
  expiration: ${JWT_EXPIRATION:86400000}

---
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    com.ecommerce: DEBUG

---
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop

---
spring:
  config:
    activate:
      on-profile: prod

logging:
  level:
    root: WARN
    com.ecommerce: INFO

