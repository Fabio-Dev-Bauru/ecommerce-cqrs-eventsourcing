spring:
  application:
    name: saga-orchestrator
  
  profiles:
    active: ${SPRING_PROFILE:dev}

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/saga_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}
    consumer:
      group-id: saga-orchestrator
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    listener:
      ack-mode: manual

server:
  port: ${SERVER_PORT:8082}

saga:
  timeout-minutes: 15
  retry:
    max-attempts: 3
    backoff-ms: 1000

logging:
  level:
    root: INFO
    com.ecommerce: DEBUG
    org.springframework.kafka: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

---
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    com.ecommerce: DEBUG

---
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect

---
spring:
  config:
    activate:
      on-profile: prod

logging:
  level:
    root: WARN
    com.ecommerce: INFO

